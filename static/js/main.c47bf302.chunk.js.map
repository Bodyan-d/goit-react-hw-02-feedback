{"version":3,"sources":["components/FeedbackOptions/FeedbackOptions.js","components/Statistics/Statistics.js","components/Notification/Notification.js","App.js","index.js"],"names":["FeedbackOptions","options","onLeaveFeedback","keysBtns","Object","keys","ucFirst","str","toUpperCase","slice","onClick","Statistics","good","neutral","bad","total","positivePercentage","Notification","message","App","state","countTotalFeedback","countPositiveFeedbackPercentage","Math","round","isEmpty","values","some","value","target","setState","prevState","textContent","toLowerCase","className","this","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4RAEe,SAASA,EAAT,GAAwD,IAA7BC,EAA4B,EAA5BA,QAASC,EAAmB,EAAnBA,gBAC3CC,EAAWC,OAAOC,KAAKJ,GAE7B,SAASK,EAAQC,GACf,OAAKA,EAEEA,EAAI,GAAGC,cAAgBD,EAAIE,MAAM,GAFvBF,EAKnB,OACE,+BACE,6BACE,wBAAQG,QAASR,EAAjB,SAAmCI,EAAQH,EAAS,QAEtD,6BACE,wBAAQO,QAASR,EAAjB,SAAmCI,EAAQH,EAAS,QAEtD,6BACE,wBAAQO,QAASR,EAAjB,SAAmCI,EAAQH,EAAS,WClB7C,SAASQ,EAAT,GAMX,IALFC,EAKC,EALDA,KACAC,EAIC,EAJDA,QACAC,EAGC,EAHDA,IACAC,EAEC,EAFDA,MACAC,EACC,EADDA,mBAEA,OACE,+BACE,uCACO,+BAAOJ,OAEd,0CACU,+BAAOC,OAEjB,sCACM,+BAAOC,OAEb,wCACQ,+BAAOC,OAEf,oDAEE,iCAAOC,EAAP,aCvBO,SAASC,EAAT,GAAoC,IAAZC,EAAW,EAAXA,QACrC,OAAO,6BAAKA,I,ICGOC,E,4MACnBC,MAAQ,CACNR,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAGPO,mBAAqB,kBACnB,EAAKD,MAAMR,KAAO,EAAKQ,MAAMP,QAAU,EAAKO,MAAMN,K,EAEpDQ,gCAAkC,kBAChCC,KAAKC,MAAO,EAAKJ,MAAMR,KAAO,EAAKS,qBAAwB,M,EAE7DI,QAAU,SAAAL,GAGR,OAFkBhB,OAAOsB,OAAON,GAElBO,MAAK,SAAAC,GAAK,OAAc,IAAVA,KAExB,cAACjB,EAAD,CACEC,KAAM,EAAKQ,MAAMR,KACjBC,QAAS,EAAKO,MAAMP,QACpBC,IAAK,EAAKM,MAAMN,IAChBC,MAAO,EAAKM,qBACZL,mBAAoB,EAAKM,oCAItB,cAACL,EAAD,CAAcC,QAAQ,uB,EAIjChB,gBAAkB,YAAiB,IAAd2B,EAAa,EAAbA,OACnB,EAAKC,UAAS,SAAAC,GAAS,sBACpBF,EAAOG,YAAYC,cAClBF,EAAUF,EAAOG,YAAYC,eAAiB,O,4CAIpD,WACE,OACE,sBAAKC,UAAU,YAAf,UACE,sDACA,cAAClC,EAAD,CACEC,QAASkC,KAAKf,MACdlB,gBAAiBiC,KAAKjC,kBAGxB,4CACCiC,KAAKV,QAAQU,KAAKf,c,GAhDMgB,aCDjCC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.c47bf302.chunk.js","sourcesContent":["import React from 'react';\n\nexport default function FeedbackOptions({ options, onLeaveFeedback }) {\n  const keysBtns = Object.keys(options);\n\n  function ucFirst(str) {\n    if (!str) return str;\n\n    return str[0].toUpperCase() + str.slice(1);\n  }\n\n  return (\n    <ul>\n      <li>\n        <button onClick={onLeaveFeedback}>{ucFirst(keysBtns[0])}</button>\n      </li>\n      <li>\n        <button onClick={onLeaveFeedback}>{ucFirst(keysBtns[1])}</button>\n      </li>\n      <li>\n        <button onClick={onLeaveFeedback}>{ucFirst(keysBtns[2])}</button>\n      </li>\n    </ul>\n  );\n}\n","import React from 'react';\n\nexport default function Statistics({\n  good,\n  neutral,\n  bad,\n  total,\n  positivePercentage,\n}) {\n  return (\n    <ul>\n      <li>\n        Good:<span>{good}</span>\n      </li>\n      <li>\n        Neutral:<span>{neutral}</span>\n      </li>\n      <li>\n        Bad:<span>{bad}</span>\n      </li>\n      <li>\n        Total:<span>{total}</span>\n      </li>\n      <li>\n        Positive Feedback:\n        <span>{positivePercentage}%</span>\n      </li>\n    </ul>\n  );\n}\n","import React from 'react';\n\nexport default function Notification({ message }) {\n  return <h3>{message}</h3>;\n}\n","import React, { Component } from 'react';\nimport './App.css';\nimport FeedbackOptions from './components/FeedbackOptions/FeedbackOptions';\nimport Statistics from './components/Statistics/Statistics';\nimport Notification from './components/Notification/Notification';\n\nexport default class App extends Component {\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0,\n  };\n\n  countTotalFeedback = () =>\n    this.state.good + this.state.neutral + this.state.bad;\n\n  countPositiveFeedbackPercentage = () =>\n    Math.round((this.state.good / this.countTotalFeedback()) * 100);\n\n  isEmpty = state => {\n    const allValues = Object.values(state);\n\n    if (allValues.some(value => value !== 0)) {\n      return (\n        <Statistics\n          good={this.state.good}\n          neutral={this.state.neutral}\n          bad={this.state.bad}\n          total={this.countTotalFeedback()}\n          positivePercentage={this.countPositiveFeedbackPercentage()}\n        ></Statistics>\n      );\n    } else {\n      return <Notification message=\"No feedback given\" />;\n    }\n  };\n\n  onLeaveFeedback = ({ target }) => {\n    this.setState(prevState => ({\n      [target.textContent.toLowerCase()]:\n        prevState[target.textContent.toLowerCase()] + 1,\n    }));\n  };\n\n  render() {\n    return (\n      <div className=\"container\">\n        <h2>Pleas leave feedback</h2>\n        <FeedbackOptions\n          options={this.state}\n          onLeaveFeedback={this.onLeaveFeedback}\n        />\n\n        <h2>Statistics</h2>\n        {this.isEmpty(this.state)}\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}