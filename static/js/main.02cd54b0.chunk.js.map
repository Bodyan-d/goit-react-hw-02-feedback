{"version":3,"sources":["App.js","index.js"],"names":["App","state","good","neutral","bad","countTotalFeedback","countPositiveFeedbackPercentage","Math","round","isEmpty","Object","values","some","value","handleClick","target","setState","prevState","textContent","toLowerCase","className","this","onClick","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4RAIqBA,E,4MACnBC,MAAQ,CACNC,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAGPC,mBAAqB,kBACnB,EAAKJ,MAAMC,KAAO,EAAKD,MAAME,QAAU,EAAKF,MAAMG,K,EAEpDE,gCAAkC,kBAChCC,KAAKC,MAAO,EAAKP,MAAMC,KAAO,EAAKG,qBAAwB,M,EAE7DI,QAAU,SAAAR,GAGR,OAFkBS,OAAOC,OAAOV,GAElBW,MAAK,SAAAC,GAAK,OAAc,IAAVA,KAExB,+BACE,uCACO,+BAAO,EAAKZ,MAAMC,UAEzB,0CACU,+BAAO,EAAKD,MAAME,aAE5B,sCACM,+BAAO,EAAKF,MAAMG,SAExB,wCACQ,+BAAO,EAAKC,0BAEpB,oDAEE,iCAAO,EAAKC,kCAAZ,aAKC,oD,EAIXQ,YAAc,YAAiB,IAAdC,EAAa,EAAbA,OACf,EAAKC,UAAS,SAAAC,GAAS,sBACpBF,EAAOG,YAAYC,cAClBF,EAAUF,EAAOG,YAAYC,eAAiB,O,4CAIpD,WACE,OACE,sBAAKC,UAAU,YAAf,UACE,sDAEA,+BACE,6BACE,wBAAQP,MAAOQ,KAAKpB,MAAM,GAAIqB,QAASD,KAAKP,YAA5C,oBAIF,6BACE,wBAAQD,MAAOQ,KAAKpB,MAAME,QAASmB,QAASD,KAAKP,YAAjD,uBAIF,6BACE,wBAAQD,MAAOQ,KAAKpB,MAAMG,IAAKkB,QAASD,KAAKP,YAA7C,sBAMJ,4CACCO,KAAKZ,QAAQY,KAAKpB,c,GAzEMsB,aCCjCC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.02cd54b0.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n//import Feedback from './components/Feedback';\n\nexport default class App extends Component {\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0,\n  };\n\n  countTotalFeedback = () =>\n    this.state.good + this.state.neutral + this.state.bad;\n\n  countPositiveFeedbackPercentage = () =>\n    Math.round((this.state.good / this.countTotalFeedback()) * 100);\n\n  isEmpty = state => {\n    const allValues = Object.values(state);\n\n    if (allValues.some(value => value !== 0)) {\n      return (\n        <ul>\n          <li>\n            Good:<span>{this.state.good}</span>\n          </li>\n          <li>\n            Neutral:<span>{this.state.neutral}</span>\n          </li>\n          <li>\n            Bad:<span>{this.state.bad}</span>\n          </li>\n          <li>\n            Total:<span>{this.countTotalFeedback()}</span>\n          </li>\n          <li>\n            Positive Feedback:\n            <span>{this.countPositiveFeedbackPercentage()}%</span>\n          </li>\n        </ul>\n      );\n    } else {\n      return <h3>No feedback given</h3>;\n    }\n  };\n\n  handleClick = ({ target }) => {\n    this.setState(prevState => ({\n      [target.textContent.toLowerCase()]:\n        prevState[target.textContent.toLowerCase()] + 1,\n    }));\n  };\n\n  render() {\n    return (\n      <div className=\"container\">\n        <h2>Pleas leave feedback</h2>\n\n        <ul>\n          <li>\n            <button value={this.state[0]} onClick={this.handleClick}>\n              Good\n            </button>\n          </li>\n          <li>\n            <button value={this.state.neutral} onClick={this.handleClick}>\n              Neutral\n            </button>\n          </li>\n          <li>\n            <button value={this.state.bad} onClick={this.handleClick}>\n              Bad\n            </button>\n          </li>\n        </ul>\n\n        <h2>Statistics</h2>\n        {this.isEmpty(this.state)}\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}